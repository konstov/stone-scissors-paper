# coding: utf-8
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É UTF-8.
from __future__ import unicode_literals
from random import choices

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON –∏ –ª–æ–≥–∞–º–∏.
import json
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–º–æ–¥—É–ª–∏ Flask –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞.
from flask import Flask, request

app = Flask(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é —Å–≤–æ–∏ –º–æ–¥—É–ª–∏
from helpers import constants

# –Ω–µ–∫–æ—Ç–æ—Ä—ã–π –Ω–∞–±–æ—Ä –∫–æ–Ω—Å—Ç–∞–Ω—Ç, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ –ø—Ä–∞–≤–∏—Ç—å –∏—Ö


logging.basicConfig(level=logging.DEBUG)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö.
sessionStorage = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user = {}


# –ó–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask.
@app.route("/", methods=['POST'])
def main():
    # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    logging.info('Request: %r', request.json)

    response = {
        "version": request.json['version'],
        "session": request.json['session'],
        "response": {
            "end_session": False
        }
    }

    handle_dialog(request.json, response)

    logging.info('Response: %r', response)

    return json.dumps(
        response,
        ensure_ascii=False,
        indent=2
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞.
def handle_dialog(req, res):
    user_id = req['session']['user_id']

    if req['session']['new']:
        # –≠—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ.

        sessionStorage[user_id] = {
            'suggests': [
                "–∫–∞–º–µ–Ω—å",
                "–Ω–æ–∂–Ω–∏—Ü—ã",
                "–±—É–º–∞–≥–∞"
            ]
        }

        res['response']['text'] = '–ü—Ä–∏–≤–µ—Ç! –°—ã–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞!'
        res['response']['tts'] = '–ü—Ä–∏–≤–µ—Ç! - - - –°—ã–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞!'
        res['response']['buttons'] = getSuggests(user_id)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    if req['request']['command'].lower() in constants.TRUE_ANSWERS:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Ç–æ –∏–≥—Ä–∞–µ–º —Å –Ω–∏–º
        text_answer, sound_answer = gameStatus(req['request']['command'].lower())

        res['response']['text'] = text_answer
        res['response']['tts'] = sound_answer
        res['response']['buttons'] = getSuggests(user_id)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—ã–≥—Ä–∞—Ç—å
    random_answer = answer()
    res['response']['text'] = '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ... –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞–∑–∞—Ç—å "{0}"? –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É "{1}"?'. \
        format(req['request']['command'], random_answer)
    res['response'][
        'tts'] = '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. - - - –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞–∑–∞—Ç—å "{0}"? –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É "{1}"?'. \
        format(req['request']['command'], random_answer)
    res['response']['buttons'] = getSuggests(user_id)


# –≤–µ—Ä–Ω—É —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
def answer(weights=[1, 1, 1]):
    answers = ['‚úä', '‚úå', '‚úã']
    return choices(answers, weights=weights)[0]


# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
def botChoiceTextMapper(bot_choice):
    if bot_choice == '‚úä':
        return '–∫–∞–º–µ–Ω—å', '–∫–∞–º–µ–Ω—å'
    elif bot_choice == '‚úã':
        return '–±—É–º–∞–≥–∞', '–±—É–º–∞–≥—É'
    elif bot_choice == '‚úå':
        return '–Ω–æ–∂–Ω–∏—Ü—ã', '–Ω–æ–∂–Ω–∏—Ü—ã'


def newRoundInvitation(isLoose):
    if not isLoose:
        return choices(constants.NEW_ROUND_INVITATION)[0]
    else:
        return choices(constants.NEW_ROUND_INVITATION_WIN_BACK)[0]


# —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
def gameStatus(user_choice, is_first=False):
    # –ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –ø–µ—Ä–≤—ã–º–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –≤—ã–∫–∏–¥—ã–≤–∞—é—Ç –Ω–æ–∂–Ω–∏—Ü—ã (–¥–æ 70 % —Å–ª—É—á–∞–µ–≤)
    if is_first:
        bot_choice = answer(weights=[1.5, 7, 1.5])
    else:
        bot_choice = answer()

    bot_choice_text, bot_choice_text_for_speech = botChoiceTextMapper(bot_choice)

    # –Ω–∏—á—å—è
    if user_choice in [bot_choice, bot_choice_text]:
        invitation = newRoundInvitation(isLoose=False)
        text_answer = '–ù–∏—á—å—è ü§ù. –ò–≥—Ä–∞ —Ç–æ–∂–µ –≤—ã–±—Ä–∞–ª–∞ {}. '.format(bot_choice)
        sound_answer = '{} - - - –ù–∏—á—å—è. - - - –ò–≥—Ä–∞ —Ç–æ–∂–µ –≤—ã–±—Ä–∞–ª–∞ {}. {}'.format(choices(constants.NEUTRAL_SOUNDS)[0],
                                                                               bot_choice_text_for_speech,
                                                                               invitation
                                                                               )


    # –ø—Ä–æ–≥–∏—Ä—ã—à
    elif (bot_choice == '‚úä' and user_choice in ['–Ω–æ–∂–Ω–∏—Ü—ã', '‚úå']) or \
            (bot_choice == '‚úå' and user_choice in ['–±—É–º–∞–≥–∞', '‚úã']) or \
            (bot_choice == '‚úã' and user_choice in ['–∫–∞–º–µ–Ω—å', '‚úä']):
        invitation = newRoundInvitation(isLoose=True)
        text_answer = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {}, –∏–≥—Ä–∞ –≤—ã–±—Ä–∞–ª–∞ {}. '.format(choices(constants.SAD_EMOTICONS)[0],
                                                                  bot_choice)
        sound_answer = '{} - - - –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. - - - –ò–≥—Ä–∞ –≤—ã–±—Ä–∞–ª–∞ {}. {}'.format(choices(constants.SAD_SOUNDS)[0],
                                                                                 bot_choice_text_for_speech,
                                                                                 invitation
                                                                                 )


    # –ø–æ–±–µ–¥–∞
    else:
        invitation = newRoundInvitation(isLoose=False)
        text_answer = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {}! –ò–≥—Ä–∞ –≤—ã–±—Ä–∞–ª–∞ {}. '.format(choices(constants.HAPPY_EMOTICONS)[0],
                                                                 bot_choice)
        sound_answer = '{} - - - –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! - - - –ò–≥—Ä–∞ –≤—ã–±—Ä–∞–ª–∞ {}. {}'.format(choices(constants.HAPPY_SOUNDS)[0],
                                                                                bot_choice_text_for_speech,
                                                                                invitation
                                                                                )
        
    return text_answer + invitation, sound_answer


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
def getSuggests(user_id):
    session = sessionStorage[user_id]

    # –í—ã–±–∏—Ä–∞–µ–º —Ç—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    suggests = [
        {'title': suggest, 'hide': True}
        for suggest in session['suggests'][:3]
    ]

    return suggests
