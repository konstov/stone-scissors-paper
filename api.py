# coding: utf-8
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É UTF-8.
from __future__ import unicode_literals
from random import choices

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON –∏ –ª–æ–≥–∞–º–∏.
import json
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–º–æ–¥—É–ª–∏ Flask –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞.
from flask import Flask, request
app = Flask(__name__)


logging.basicConfig(level=logging.DEBUG)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö.
sessionStorage = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user = {}

# –ó–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask.
@app.route("/", methods=['POST'])

def main():
# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    logging.info('Request: %r', request.json)

    response = {
        "version": request.json['version'],
        "session": request.json['session'],
        "response": {
            "end_session": False
        }
    }

    handle_dialog(request.json, response)

    logging.info('Response: %r', response)

    return json.dumps(
        response,
        ensure_ascii=False,
        indent=2
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞.
def handle_dialog(req, res):
    user_id = req['session']['user_id']

    if req['session']['new']:
        # –≠—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ.

        sessionStorage[user_id] = {
            'suggests': [
                "–∫–∞–º–µ–Ω—å",
                "–Ω–æ–∂–Ω–∏—Ü—ã",
                "–±—É–º–∞–≥–∞",
            ]
        }

        res['response']['text'] = '–ü—Ä–∏–≤–µ—Ç! –°—ã–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞!'
        res['response']['buttons'] = getSuggests(user_id)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    if req['request']['command'].lower() in ['‚úä', '‚úå', '‚úã', '–Ω–æ–∂–Ω–∏—Ü—ã', '–∫–∞–º–µ–Ω—å', '–±—É–º–∞–≥–∞']:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Ç–æ –∏–≥—Ä–∞–µ–º —Å –Ω–∏–º
        res['response']['text'] = gameStatus(req['request']['command'].lower())
        res['response']['buttons'] = getSuggests(user_id)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—ã–≥—Ä–∞—Ç—å
    res['response']['text'] = '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ... –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞–∑–∞—Ç—å "{0}"? –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É "{1}"?'.\
        format(req['request']['command'], answer())
    res['response']['buttons'] = getSuggests(user_id)


# –≤–µ—Ä–Ω—É —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
def answer(weights=[1, 1, 1]):
    answers = ['‚úä', '‚úå', '‚úã']
    return choices(answers, weights=weights)[0]


def botChoiceTextMapper(bot_choice):
    if bot_choice == '‚úä':
        return '–∫–∞–º–µ–Ω—å'
    elif bot_choice == '‚úã':
        return '–±—É–º–∞–≥—É'
    elif bot_choice == '‚úå':
        return '–Ω–æ–∂–Ω–∏—Ü—ã'


def newRoundInvitation():
    phraces = ['–ï—â—ë —Ä–∞–∑–æ–∫?', '–î–∞–≤–∞–π—Ç–µ –µ—â—ë?', '–ò–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ?', '–í–∞—à —Ö–æ–¥!']
    return choices(phraces)[0]

# —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
def gameStatus(user_choice, is_first=False):
    # –ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –ø–µ—Ä–≤—ã–º–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –≤—ã–∫–∏–¥—ã–≤–∞—é—Ç –Ω–æ–∂–Ω–∏—Ü—ã (–¥–æ 70 % —Å–ª—É—á–∞–µ–≤)
    if is_first:
        bot_choice = answer(weights=[1.5, 7, 1.5])
    else:
        bot_choice = answer()

    bot_choice_text = botChoiceTextMapper(bot_choice)

    if user_choice in [bot_choice, bot_choice_text]:
        phrace = '–ù–∏—á—å—è ü§ù. –ò–≥—Ä–∞ —Ç–æ–∂–µ –≤—ã–±—Ä–∞–ª–∞ {}. '.format(bot_choice_text)

    elif (bot_choice == '‚úä' and user_choice in ['–Ω–æ–∂–Ω–∏—Ü—ã', '‚úå']) or\
         (bot_choice == '‚úå' and user_choice in ['–±—É–º–∞–≥–∞', '‚úã']) or\
         (bot_choice == '‚úã' and user_choice in ['–∫–∞–º–µ–Ω—å', '‚úä']):
        phrace = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòï, –∏–≥—Ä–∞ –≤—ã–±—Ä–∞–ª–∞ {}. '.format(bot_choice_text)

    else:
        phrace = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üôå! –ò–≥—Ä–∞ –≤—ã–±—Ä–∞–ª–∞ {}. '.format(bot_choice_text)

    return phrace + newRoundInvitation()

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
def getSuggests(user_id):
    session = sessionStorage[user_id]

    # –í—ã–±–∏—Ä–∞–µ–º —Ç—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    suggests = [
        {'title': suggest, 'hide': True}
        for suggest in session['suggests'][:3]
    ]

    return suggests
